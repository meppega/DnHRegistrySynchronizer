name: "[RR-6677] Update yaml containing images for sync"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'RR-6677'
  # schedule:
  #   - cron: '0 0 * * *'
  # push:

jobs:
  update-yaml:
    runs-on: ubuntu-latest
    # runs-on: rebootrebels-azure-prod
    # environment: prod
    permissions:
      contents: write
    env:
      CONFIG_FILE: "config/sync-config.yaml"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'RR-6677' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: 'Az CLI login'
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ vars.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ vars.AZURE_TENANT_ID }}
      #     subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Build docker image
        uses: docker/build-push-action@v5
        with:
          context: ./skopeo-with-helm
          file: ./skopeo-with-helm/ubuntu-skopeo-helm.dockerfile
          tags: ubuntu-skopeo-helm:latest
          push: false

      - name: Bring up Docker Compose services
        run: docker compose -f docker-compose.yaml up -d --build ubuntu-skopeo

      # this wont run, containers are set up in a way that doesnt allow installing applications
      # - name: Re/Install skopeo in ubuntu-skopeo container
      #   run: |
      #     docker compose -f docker-compose.yaml exec ubuntu-skopeo bash -c "apt-get update && apt-fast install -y skopeo"

      - name: Verify initial config file content (for debugging)
        run: |
          echo "--- Initial content of config/sync-config.yaml on runner ---"
          cat "${{ env.CONFIG_FILE }}"
          ls -l config/
          echo "--- Initial content of config/sync-config.yaml in skopeo container ---"
          docker compose -f docker-compose.yaml exec ubuntu-skopeo cat "/ARISU/${{ env.CONFIG_FILE }}"
      
      - name: Remove YAML entries using skopeo container
        run: |
          set -e
          echo "--- Removing YAML entries (Example) ---"
          docker compose -f docker-compose.yaml exec ubuntu-skopeo /bin/bash \
            /ARISU/scripts/remove_yaml_entries.sh "/ARISU/${{ env.CONFIG_FILE }}" image \
            --registry-path "images/alpine" \
            --version "3.22"
          docker compose -f docker-compose.yaml exec ubuntu-skopeo /bin/bash \
            /ARISU/scripts/remove_yaml_entries.sh "/ARISU/${{ env.CONFIG_FILE }}" chart \
            --chart-name "nginx" \
            --chart-version "15.14.0"

      - name: Add YAML entries using skopeo container
        run: |
          set -e
          echo "--- Adding YAML entries (Example) ---"
          docker compose -f docker-compose.yaml exec ubuntu-skopeo /bin/bash \
          /ARISU/scripts/add_yaml_entries.sh "/ARISU/${{ env.CONFIG_FILE }}" image \
          --source "docker.io/library/alpine" \
          --destination-path "images/alpine" \
          --version "3.22"
          docker compose -f docker-compose.yaml exec ubuntu-skopeo /bin/bash \
          /ARISU/scripts/add_yaml_entries.sh "/ARISU/${{ env.CONFIG_FILE }}" chart \
          --repo-name "bitnami" \
          --repo-url "https://charts.bitnami.com/bitnami" \
          --chart-name "nginx" \
          --chart-version "15.14.0" \
          --destination-path "charts/"

      - name: Verify final config file content (for debugging)
        run: |
          echo "--- Final content of config/sync-config.yaml on runner ---"
          cat "${{ env.CONFIG_FILE }}"
          echo "--- Final content of config/sync-config.yaml in skopeo container ---"
          docker compose -f docker-compose.yaml exec skopeo cat "/ARISU/${{ env.CONFIG_FILE }}"

      - name: Tear down Docker Compose services (optional, good for cleanup)
        if: always() # Ensure this runs even if previous steps fail
        run: docker compose -f docker-compose.yaml down
      
      # TODO: Add a step to commit changes when scripts modify the file
      - name: Commit and Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "${{ env.CONFIG_FILE }}"
          git diff --staged --quiet || git commit -m "Automated: Update sync-config.yaml on branch ${{ github.event.inputs.branch || 'RR-6677' }}"
          # Only push if there are changes to avoid error on no-op commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git push
          fi